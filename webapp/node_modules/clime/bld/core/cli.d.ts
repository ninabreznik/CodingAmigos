import Promise from 'thenfail';
import { Context, HelpInfo } from './command';
import { Printable } from './object';
import { ExpectedError } from './error';
export interface DescriptiveObject {
    brief?: string;
    description?: string;
}
/**
 * Clime command line interface.
 */
export declare class CLI {
    /** Command entry name. */
    name: string;
    root: string;
    constructor(
        /** Command entry name. */
        name: string, 
        /** Root directory of command modules. */
        root: string);
    execute(argv: string[], cwd?: string): Promise<Printable | void>;
    private preProcessArguments(argv);
    private executeCommand(command, commandArgs, commandExtraArgs, commandOptions, context);
    getHelp(): HelpInfo;
}
export interface ParsedArgs {
    args?: any[];
    extraArgs?: any[];
    options?: Clime.HashTable<any>;
    context?: Context;
    help?: boolean;
}
export interface HelpProvider {
    getHelp(): HelpInfo;
}
export declare class UsageError extends ExpectedError implements Printable {
    helpProvider: HelpProvider;
    constructor(message: string, helpProvider: HelpProvider);
    print(stdout: NodeJS.WritableStream, stderr: NodeJS.WritableStream): void;
}
