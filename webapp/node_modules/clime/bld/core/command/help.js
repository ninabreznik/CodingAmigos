"use strict";
var Path = require('path');
var FS = require('fs');
var Chalk = require('chalk');
var utils_1 = require('../../utils');
var HelpInfo = (function () {
    function HelpInfo() {
        this.texts = [];
    }
    Object.defineProperty(HelpInfo.prototype, "text", {
        get: function () {
            return this.texts.join('\n');
        },
        enumerable: true,
        configurable: true
    });
    HelpInfo.build = function (arg, description) {
        var info = new HelpInfo();
        if (typeof arg === 'string') {
            info.buildDescription(description);
            info.buildTextForSubCommands(arg);
        }
        else {
            info.buildDescription(arg.description);
            info.buildTextsForParamsAndOptions(arg);
            var dir = Path.dirname(arg.path);
            if (Path.basename(arg.path) !== 'default.js') {
                dir = Path.join(dir, Path.basename(arg.path, '.js'));
            }
            info.buildTextForSubCommands(dir);
        }
        return info;
    };
    HelpInfo.prototype.buildDescription = function (description) {
        if (description) {
            this.texts.push(utils_1.indent(description) + "\n");
        }
    };
    HelpInfo.prototype.buildTextsForParamsAndOptions = function (CommandClass) {
        var paramDefinitions = CommandClass.paramDefinitions;
        var paramsDefinition = CommandClass.paramsDefinition;
        var parameterDescriptionRows = [];
        var parameterUsageTexts = [];
        if (paramDefinitions) {
            parameterUsageTexts = paramDefinitions.map(function (definition) {
                var name = definition.name, required = definition.required, description = definition.description, defaultValue = definition.default;
                if (description) {
                    parameterDescriptionRows.push([
                        Chalk.bold(name),
                        description
                    ]);
                }
                return required ?
                    "<" + name + ">" :
                    "[" + name + (defaultValue !== undefined ? '=' + defaultValue : '') + "]";
            });
        }
        else {
            parameterUsageTexts = [];
        }
        if (paramsDefinition) {
            var name_1 = paramsDefinition.name, required = paramsDefinition.required, description = paramsDefinition.description;
            if (description) {
                parameterDescriptionRows.push([
                    Chalk.bold(name_1),
                    description
                ]);
            }
            parameterUsageTexts.push(required ?
                "<..." + name_1 + ">" :
                "[..." + name_1 + "]");
        }
        var optionDefinitions = CommandClass.optionDefinitions || [];
        var requiredOptionUsageItems = optionDefinitions
            .filter(function (definition) { return definition.required; })
            .map(function (_a) {
            var name = _a.name, placeholder = _a.placeholder;
            return ("--" + name + " <" + (placeholder || name) + ">");
        });
        var usageLine = [
            Chalk.bold(CommandClass.sequence.join(' '))
        ].concat(parameterUsageTexts, requiredOptionUsageItems).join(' ');
        if (optionDefinitions.length > requiredOptionUsageItems.length) {
            usageLine += ' [...options]';
        }
        var usageContent = "  " + Chalk.green('USAGE') + "\n\n    " + usageLine + "\n";
        this.texts.push(usageContent);
        if (parameterDescriptionRows.length) {
            var paramsContent = "  " + Chalk.green('PARAMETERS') + "\n\n" + utils_1.buildTableOutput(parameterDescriptionRows, { indent: 4, spaces: ' - ' });
            this.texts.push(paramsContent);
        }
        if (optionDefinitions.length) {
            var optionRows = optionDefinitions
                .map(function (definition) {
                var name = definition.name, key = definition.key, flag = definition.flag, placeholder = definition.placeholder, isToggle = definition.toggle, description = definition.description;
                var triggerStr = flag ? "-" + flag + ", " : '';
                triggerStr += "--" + name;
                if (!isToggle) {
                    triggerStr += " <" + (placeholder || key) + ">";
                }
                return [
                    Chalk.bold(triggerStr),
                    description
                ];
            });
            this.texts.push("  " + Chalk.green('OPTIONS') + "\n\n" + utils_1.buildTableOutput(optionRows, { indent: 4, spaces: ' - ' }));
        }
    };
    HelpInfo.prototype.buildTextForSubCommands = function (dir) {
        if (!FS.existsSync(dir) || !FS.statSync(dir).isDirectory()) {
            return;
        }
        var rows = FS
            .readdirSync(dir)
            .map(function (name) {
            var path = Path.join(dir, name);
            var stats = FS.statSync(path);
            if (stats.isFile()) {
                if (name === 'default.js' || Path.extname(path) !== '.js') {
                    return undefined;
                }
                name = Path.basename(name, '.js');
            }
            else {
                path = Path.join(path, 'default.js');
            }
            var description;
            if (FS.existsSync(path)) {
                var module_1 = require(path);
                var CommandClass = (module_1.default || module_1);
                description = CommandClass && (CommandClass.brief || CommandClass.description);
            }
            return [
                Chalk.bold(name),
                description
            ];
        })
            .filter(function (row) { return !!row; });
        if (rows.length) {
            this.texts.push("  " + Chalk.green('SUBCOMMANDS') + "\n\n" + utils_1.buildTableOutput(rows, { indent: 4, spaces: ' - ' }));
        }
    };
    HelpInfo.prototype.print = function (stdout, stderr) {
        stderr.write("\n" + this.text + "\n");
    };
    return HelpInfo;
}());
exports.HelpInfo = HelpInfo;
//# sourceMappingURL=help.js.map